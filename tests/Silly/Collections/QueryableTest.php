<?php

namespace Silly\Collections;

use \Silly\Collections\Queryable;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-10 at 23:24:16.
 */
class QueryableTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \Silly\Collections\Queryable
     */
    protected $object;
    protected $array;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->array = [
            ['a' => 1],
            ['b' => 2],
            'c'
        ];

        $this->object = new Queryable($this->array);
        $this->type   = Queryable::class;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Silly\Collections\Queryable::from
     */
    public function testFrom()
    {
        $q = Queryable::from($this->array);
        $this->assertInstanceOf($this->type, $q, "Assert type is Queryable.");
        $this->assertCount(3, $q, "Assert length is 3.");
        $this->assertEquals($this->object, $q, 'Assert similarity.');
    }

    /**
     * @covers Silly\Collections\Queryable::contains
     */
    public function testContains()
    {
        $arr  = &$this->array[0];
        $ret1 = $this->object->contains(function($a)
        {
            return $a === 'c';
        });
        $ret2 = $this->object->contains(function(&$a) use(&$arr)
        {
            return $a === $arr;
        });
        $ret3 = $this->object->contains(function($a)
        {
            return $a === 1;
        });

        $this->assertTrue($ret1, "Assert contains an primitive type item.");
        $this->assertTrue($ret2, "Assert contains a reference.");
        $this->assertFalse($ret3, "Assert not contains a value.");
    }

    /**
     * @covers Silly\Collections\Queryable::where
     * @covers Silly\Collections\Queryable::_where
     */
    public function testWhere()
    {
        $arr  = &$this->array[0];
        $ret1 = $this->object->where(function($a)
        {
            return $a === 'c';
        });
        $ret2 = $this->object->where(function(&$a) use(&$arr)
        {
            return $a === $arr;
        });
        $ret3 = $this->object->where(function($a)
        {
            return $a === 1;
        });
        
        $this->assertInstanceOf($this->type, $ret1, "Assert type is Queryable (1).");
        $this->assertInstanceOf($this->type, $ret2, "Assert type is Queryable (2).");
        $this->assertInstanceOf($this->type, $ret3, "Assert type is Queryable (3).");
        
        $this->assertCount(1, $ret1, "Assert count (1).");
        $this->assertCount(1, $ret2, "Assert count (2).");
        $this->assertCount(0, $ret3, "Assert count (3).");
        
        $this->assertEquals(end($this->array), $ret1[0], "Assert item value.");
    }

    /**
     * @covers Silly\Collections\Queryable::where
     * @covers Silly\Collections\Queryable::_where
     * @covers Silly\Collections\Queryable::select
     * @covers Silly\Collections\Queryable::_select
     */
    public function testSelect()
    {
        $selection = $this->object->where(function($n){ return $n !== 'c'; })
        ->select(function(&$item){
            return (object)$item;
        });
        
        $this->assertCount(2, $selection, "Assert array query selection.");
    }

    /**
     * @covers Silly\Collections\Queryable::where
     * @covers Silly\Collections\Queryable::_where
     * @covers Silly\Collections\Queryable::firstOrDefault
     */
    public function testFirstOrDefault()
    {
        $this->assertEquals($this->array[0], $this->object->firstOrDefault(), "Assert first element return.");
        $this->assertEquals($this->array[2], $this->object->firstOrDefault(function($n){ return $n === 'c'; }), "Assert filtered first element return.");
    }

}
