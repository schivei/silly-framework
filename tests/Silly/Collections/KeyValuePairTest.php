<?php
namespace Silly\Collections;

use \PHPUnit_Framework_TestCase;
use function \Silly\validateType;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-12 at 23:04:39.
 */
class KeyValuePairTest extends PHPUnit_Framework_TestCase
{
    protected $key;
    protected $value;
    protected $typeT;
    protected $typeTE;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->typeT  = 'string';
        $this->typeTE = 'string';

        validateType($this->typeT);
        validateType($this->typeTE);
        
        $this->key = "teste";
        $this->value = 1;
    }
    
    private function getKP($k, $v)
    {
        return new \Silly\Collections\KeyValuePair($this->typeT, $this->typeTE, $k, $v);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Silly\Collections\KeyValuePair::__construct
     * @todo   Implement testGetKey().
     */
    public function test__constructor()
    {
        $this->setExpectedException(\InvalidArgumentException::class, "The key argument can't be null.", 0);
        $a = $b = $d = 'string';
        $c = null;
        new \Silly\Collections\KeyValuePair($a, $b, $c, $d);
    }

    /**
     * @covers Silly\Collections\KeyValuePair::getValue
     * @todo   Implement testGetValue().
     */
    public function testGetValue()
    {
        $kp = $this->getKP('a', 'b');
        $v = $kp->getValue();
        $this->assertEquals('b', $v, 'Assert get value');
    }
}
