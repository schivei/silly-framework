<?php

namespace Silly;

use \InvalidArgumentException,
    \PHPUnit_Framework_TestCase,
    \SplBool,
    \SplFloat,
    \SplInt,
    \SplString,
    \UnexpectedValueException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-11 at 01:04:27.
 */
class SillyTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var \Silly\Silly
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new \Silly\Silly;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Silly\Silly::autoload
     */
    public function testAutoload()
    {
        \Silly\Silly::autoload('Silly\IO\File');
        $loaded = \class_exists('Silly\IO\File', false);
        $this->assertTrue($loaded, "Assert autoloader");
    }

    /**
     * @covers Silly\Silly::registerAutoloader
     */
    public function testRegisterAutoloader()
    {
        $pre_loaded = \spl_autoload_functions();

        \Silly\Silly::registerAutoloader();

        $pos_loaded = \spl_autoload_functions();

        $this->assertCount(count($pre_loaded) + 1, $pos_loaded, "Assert loader registered.");
    }

    /**
     * @use \Silly\typeof
     */
    public function testTypeof()
    {
        $checks = null;
        $v1     = \Silly\typeof($checks);
        $this->assertEquals('NULL', $v1, 'Assert null value on typeof.');

        $checks = new SplBool(true);
        $v2     = \Silly\typeof($checks);
        $this->assertEquals('SplBool', $v2, 'Assert object type on typeof.');

        $checks2 = '';
        $v3      = \Silly\typeof($checks2);
        $this->assertEquals('string', $v3, 'Assert primitive type on typeof.');
    }

    /**
     * @use validateType
     */
    public function testValidateType()
    {
        $this->setExpectedException(InvalidArgumentException::class, "Type argument not found.", 0);

        $type = new SplString();

        \Silly\validateType($type);
    }

    /**
     * @use validateType
     */
    public function testValidateType2()
    {
        $type      = "string";
        $primitive = \Silly\validateType($type);
        $this->assertTrue($primitive, "Assert primitive type.");

        $type      = "integer";
        $primitive = \Silly\validateType($type);
        $this->assertTrue($primitive, "Assert primitive type.");

        $type      = "float";
        $primitive = \Silly\validateType($type);
        $this->assertTrue($primitive, "Assert primitive type.");

        $type      = "boolean";
        $primitive = \Silly\validateType($type);
        $this->assertTrue($primitive, "Assert primitive type.");

        $type      = \Silly\Silly::class;
        $primitive = \Silly\validateType($type);
        $this->assertFalse($primitive, "Assert an object type.");
    }

    /**
     * @use \Silly\validateValueByType
     * @use \Silly\validateType
     * @use \Silly\typeof
     */
    public function testValidateValueByType()
    {
        $this->setExpectedException(InvalidArgumentException::class, "The value type is invalid. Expected Silly\Silly instead of integer", 0);

        $type  = \Silly\Silly::class;
        $value = 1;

        \Silly\validateValueByType($type, $value);
    }
    
    /**
     * @use \Silly\validateValueByType
     * @use \Silly\validateType
     * @use \Silly\typeof
     */
    public function testValidateValueByType3()
    {
        $this->setExpectedException(InvalidArgumentException::class, "The value type is invalid. Expected string instead of Silly\Silly", 0);

        $type  = 'string';
        $value = new \Silly\Silly;

        \Silly\validateValueByType($type, $value);
    }

    /**
     * @use \Silly\valueByType
     * @use \Silly\validateType
     * @use \Silly\typeof
     */
    public function testValidateValueByType2()
    {
        $type  = \Silly\Silly::class;
        $value = null;
        \Silly\validateValueByType($type, $value);

        $this->assertNull($value, "Assert null value validation.");

        $type  = 'string';
        $value = null;
        \Silly\validateValueByType($type, $value, false);

        $this->assertNull($value, "Assert null value validation as null.");

        $type     = 'string';
        $value    = null;
        \Silly\validateValueByType($type, $value);
        $expected = '';

        $this->assertEquals($expected, $value, "Assert null value validation as string.");

        $type     = 'float';
        $value    = null;
        \Silly\validateValueByType($type, $value);
        $expected = 0.0;

        $this->assertEquals($expected, $value, "Assert null value validation as string.");

        $type     = 'integer';
        $value    = null;
        \Silly\validateValueByType($type, $value);
        $expected = 0;

        $this->assertEquals($expected, $value, "Assert null value validation as string.");

        $type     = 'boolean';
        $value    = null;
        \Silly\validateValueByType($type, $value);
        $expected = false;

        $this->assertEquals($expected, $value, "Assert null value validation as string.");
    }

}
